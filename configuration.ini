# Configuration file for dwdforecast.py
[DWD]           
	# DWD Station Name / Number
    # Use : https://wettwarn.de/mosmix/mosmix.html to find closest station to you
    # 
    DWDStation = P755
    # This is the matching URL for the given station
    # Please also ensure the station provides Rad1h data (some do not - without this dataset, the simulation WILL NOT WORK
    # Only use the "all_stations" if you got decent hardware
    #DWDStationURL = 'http://opendata.dwd.de/weather/local_forecasts/mos/MOSMIX_S/all_stations/kml'
    #On Raspberries & alikes, use the one for your specific station: 
    DWDStationURL = http://opendata.dwd.de/weather/local_forecasts/mos/MOSMIX_L/single_stations/P755/kml
[SolarSystem]
    # GPS  Longitude of your solar system (use google maps etc. to find out)
    Longitute = 11.6
    # GPS  Latitude of your solar system (use google maps etc. to find out)
    Latitude = 48.1
    #Altitude [m] of your solar system´s location
    Altitude = 491
    # Elevation [Degrees]: Inclination angle of solar panels (0 degrees would be horizontal)
    Elevation = 35
    # Azimuth [Degrees] of your panels: Orientation - where 270=West, 180=South, 90=East
    Azimuth = 178
    # NumPanels [int] Number of panels per string in the solar system
    NumPanels = 14
    # NumStrings [int] Number of strings in the solar system
    NumStrings = 2
    # Albedo of your surrondind SolarSystem´s environment [%] with 100% = 1
    # Please see below for typical values:
    # https://pvpmc.sandia.gov/model…-ground-reflected/albedo/
    Albedo = 0.14
    # InverterName [string] - Name of the inverter of your solar system
    # Caution: special characters need to be replaced with underscores
    # CSV file used by pvlib can be found in your python installation
    # e.g: /usr/local/lib/python3.5/dist-packages/pvlib/data
    # in sam-library-cec-inverters-2019-03-05.csv
    # So Map from name in CSV file 
    # SMA America: SB10000TL-US [240V]
    # To 
    # SMA_America__SB10000TL_US__240V_
    # You can also create your own ones - but need to adjust csv file in pvlib installation
    # Kostal__Plenticore_plus_10
    InverterName = SMA_America__SB10000TL_US__240V_
    
    # ModuleName [string] - Name of the solar modules of your solar system
    # Caution: special characters need to be replaced with underscores
    # CSV file used by pvlib can be found in your python installation
    # e.g: /usr/local/lib/python3.5/dist-packages/pvlib/data
    # in sam-library-cec-modules-2019-03-05.csv
    # So Map from name in CSV file 
    # LG Electronics Inc. LG335E1C-A5
    # To 
    # LG_Electronics_Inc__LG335E1C_A5
    ModuleName = LG_Electronics_Inc__LG335E1C_A5
    #MyTimezone [string] - Timezone of DWD data: GMT 
    #https://pvlib-python.readthedocs.io/en/stable/timetimezones.html
    MyTimezone = GMT
    #
    #SimpleMultiplicationFactor [real]
    #A Factor that gets used to convert Rad1wh values to actual Powergen values (Rad1wh --> Rad1Energy)
    #Note: SimpleMultiplicationFactor is only being used for an approximate calculation that does not take azimuth - or elevation into account
    # SimpleMultiplicationFactor =  ModuleArea * ModuleEfficiency * InverterEfficiency
    # Modulearea [squaremeters] (e.g.)                  : 28 * 1*1.6 
    # ModuleEfficiency (from Datasheet of your panel)   : 0.196
    # InverterEfficiency (from Inverter Datasheet)      : 0.98
    # SimpleMultiplicationFactor = 0.278 * 44.8 * 0.196 * 0.98 = 8.605184
    # For the above values - this results in SimpleMultiplicationFactor below:
    SimpleMultiplicationFactor = 8.605184
    #Temperatureoffset [real in °C] : an addition to the temperature input from DWDStation
    #Some users reported different actual temperatures whereas others were fine with the temperature values calculated by pvlib
    TemperatureOffset = 15
    
    
[Processing]
    #Sleeptime [seconds] : Time we pause before we check the DWD webpage for updates
    Sleeptime = 15
    

[Output]
    # PrintOutput of the program [int] 0 = no, 1 = yes
    PrintOutput = 1
    # CSVOutput of the program [int] 0 = no, 1 = yes
    CSVOutput = 1
    # CSVFile - in case we have set CSVOutput to 1, we also must have a file to write to
    CSVFile = outputdwdforecast.csv
    # DBOutput of the program [int] 0 = no, 1 = yes - we output result to mysql Database
    # Tested with mariaDB
    DBOutput = 0
    # DBUser [string] : Name of the database user
    DBUser = pi
    # DBPassword [string] : Password for database user DBUser
    DBPassword = pi1
    # DBHost [string] : Host machine of database 
    DBHost = 192.168.178.39
    # DBName
    DBName = YourDBName
    # DBTable [string] : Database table name that you want to commit your data to
    # A Table with the following definition is what we are populating to:
    #describe dwd;
    #    +-------------+------------+------+-----+---------+-------+
    #    | Field       | Type       | Null | Key | Default | Extra |
    #    +-------------+------------+------+-----+---------+-------+
    #    | mydatetime  | datetime   | NO   | PRI | NULL    |       |
    #    | mytimestamp | int(11)    | NO   | PRI | 0       |       |
    #    | Rad1h       | float(8,2) | NO   |     | 0.00    |       |
    #    | PPPP        | float(8,2) | NO   |     | 0.00    |       |
    #    | FF          | float(5,2) | NO   |     | 0.00    |       |
    #    | TTT         | float(5,2) | NO   |     | 0.00    |       |
    #    | Rad1wh      | float(8,2) | NO   |     | 0.00    |       |
    #    | Rad1Energy  | float(8,2) | NO   |     | 0.00    |       |
    #    | ACSim       | float(8,2) | NO   |     | 0.00    |       |
    #    | DCSim       | float(8,2) | NO   |     | 0.00    |       |
    #    | CellTempSim | float(5,2) | NO   |     | 0.00    |       |
    #    +-------------+------------+------+-----+---------+-------+
    DBTable = dwd
   
    
    